<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/css/users.css">
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg ">
        <div class="container">
            <div class="text-center" style="margin-left: 20%;">
                <h1 class="text-center">Welcome to User Dashboard</h1>
            </div>
            <ul class="nav justify-content-end">
                <li class="nav-item">
                    <a class="nav-link1" href="#">Log Out</a>
                </li>
            </ul>
        </div>
    </nav>

    <div class="container-fluid side">
        <div class="row">
            <div class="col-12 col-md-3 col-lg-2 sidebar">
                <ul class="nav flex-column">
                    <li style="margin-left: 40px; margin-bottom: 20px;"></li>
                    <li><%= user.matric %></li>
                    <li><%= user.user_type %></li>
                    <li class="nav-item li-nav">
                        <a class="nav-link atag active" href="/user/dashboard">HOME</a>
                    </li>
                    <li class="nav-item li-nav">
                        <a class="nav-link atag active" href="/user/profile/details?id=<%= user._id %>">Profile</a>
                    </li>
                    <li class="nav-item li-nav">
                        <a class="nav-link atag" href="/check/result">Check Result</a>
                    </li>
                    <li class="nav-item li-nav lay-complaint">
                        <a class="nav-link atag" href="#">Lay Complaint</a>
                    </li>
                    <li class="nav-item li-nav">
                        <a class="nav-link atag" href="#">Notifications</a>
                    </li>
                </ul>
            </div>

            <div class="wrapp-box bx">
                <div class="container box-cont">
                    <div class="box1 bg-secondary">
                        <h2>Are You New Here?</h2>
                        <p>If you are a new Student/User, kindly go through the following steps</p>
                        <ul class="txt-steps1">
                            <li>You can update your profile</li>
                            <li>Check result</li>
                            <li>Lay complaint about your result without stress</li>
                        </ul>
                    </div>
                    <div class="box2 bg-success">
                        <h2>If You Need Any Help or Are Confused About Anything</h2>
                        <p>Kindly contact us through this email ucheuc070@gmail.com <%= user %></p>
                    </div>
                </div>
            </div>

            <div class="container wrapp-complaint" style="display: none;">
                <form class="row g-3" action="/submit/complaint/form" method="post" enctype="multipart/form-data">
                    <div class="row g-3 form">
                        <h2 id="form-txt" class="text-center">Complaint Form</h2>
                        
                        <input type="hidden" name="matric" value="<%= user.matric %>">
                        <input type="hidden" name="department" value="<%= user.department %>">
                        <input type="hidden" name="email" value="<%= user.email %>">
                        <input type="hidden" name="phone_no" value="<%= user.phone_no %>">

                        <div class="col-md-6">
                            <label for="inputPassword4" class="form-label">Course Title</label>
                            <input type="text" class="form-control" id="inputPassword4" name="course_title" placeholder="Enter course title" required>
                        </div>
                        <div class="col-md-6 d-p">
                            <label for="inputPassword4" class="form-label">Course Code</label>
                            <input type="text" class="form-control" id="inputPassword4" name="course_code" placeholder="Enter course code" required>
                        </div>
                        <div class="col-md-6">
                            <label for="inputPassword4" class="form-label">Complaint Date</label>
                            <input type="date" class="form-control" id="inputPassword4" name="complaint_date" placeholder="Enter complaint date" required>
                        </div>
                        <div class="col-md-6 d-p">
                            <label for="inputPassword4" class="form-label">Level</label>
                            <input type="number" class="form-control" id="inputPassword4" name="level" placeholder="Provide the related level" required>
                        </div>
                        <div class="col-md-6">
                            <label for="inputPassword4" class="form-label">Attach the Registered Course</label>
                            <input type="file" class="form-control" id="inputPassword4" name="registeredCourse" placeholder="Attach the registered course" required>
                        </div>
                        <div class="col-md-6 d-p">
                            <label for="inputPassword4" class="form-label">Attach Result</label>
                            <input type="file" class="form-control" id="inputPassword4" name="result" placeholder="Attach result" required>
                        </div>
                        <div class="col-md-6">
                            <label for="inputPassword4" class="form-label">Challenge Description</label>
                            <textarea name="comment" id="description" cols="130" rows="5" required placeholder="Write a short note about the challenge"></textarea>
                        </div>
                        <div class="container reg-cont">
                            <button class="regbtn">Submit Complaint</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="/jquery/dist/jquery.js"></script>
    <script src="/js/userDashboard.js"></script>
    <script src="/bootstrap/dist/js/bootstrap.bundle.js"></script>
</body>
</html>





\




const mongoose = require('mongoose');

// Define the course schema
const courseSchema = new mongoose.Schema({
  course_title: { type: String, required: true },
  course_code: { type: String, required: true },
  course_unit: { type: Number, required: true },
  assessment1: { type: Number, required: true },
  assessment2: { type: Number, required: true },
  exam_score: { type: Number, required: true },
  total_score: { type: Number, required: true },
  grade: { type: String, required: true }
});

// Define the user schema
const userSchema = new mongoose.Schema({
  first_name: { type: String, required: true },
  last_name: { type: String, required: true },
  email: { type: String, required: true },
  department: { type: String, required: true },
  section: { type: String, required: true },
  level: { type: String, required: true },
  semester: { type: String, required: true },
  courses: [courseSchema]  // Embed the course schema as an array
});

const Result = mongoose.model('uploadedResult', userSchema);

module.exports = Result;

// const genUsertoken = (userId) => {
    //   try {
    //     const token = jwt.sign({ id: userId }, process.env.JWT_SECRET_KEY, { expiresIn: '1h' });
    //     console.log('User token generated', token);
    //     return token;
    //   } catch (error) {
    //     throw new Error('Token generation failed');
    //   }
    // };
    
    
    // const verifyUserToken = async (req, res, next) => {
    //   const token = req.session.token; // Retrieve the token from session
    //   const userId = req.session.userId; // Retrieve the user ID from session
    
    //   if (!token) return res.status(403).send('No token provided.');
    //   if (!userId) return res.status(403).send('No user ID found in session.');
    
    //   try {
    //     const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
    //     console.log('User token verified successfully', decoded);
    
    //     const user = await User.findById(userId) // Fetch user data excluding the password
    //     if (!user) {
    //       return res.status(404).send('User not found.');
    //     }
    //     req.user = user; // Attach user data to req.user
    //     next();
    //   } catch (error) {
    //     return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });
    //   }
    // };

<!-- 
  
.box-cont{
    
    font-size: larger;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-top: 20px;
    
}
.box-cont .box1{
    width: 250px;
    background-color:#fff ;
    height: 200px;
    box-shadow: 0 2px 2px 2px #ddd;
    padding: 10px;
    font-size: larger;
    font-weight: 600;
}
.box-cont .box1 .fig, .text{
    margin: 30px 10px ;
    text-transform: capitalize;
    text-shadow: 0 4px 4px  #ddd;
}
.box-cont .icon{
    position: absolute;
    left: 15%;
    top: 5%;
    font-size: 200%;
 color:  rgb(255, 135, 0);
 
}
.box-cont .icon1{
    position: absolute;
    left: 40%;
    top: 5%;
    font-size: 200%;
 color:  rgb(255, 135, 0);
}
.box-cont .icon2{
    position: absolute;
    left: 65%;
    top: 5%;
    font-size: 200%;
 color:  rgb(255, 135, 0);
}
.box-cont  .icon3{
    position: absolute;
    left: 90%;
    top: 5%;
    font-size: 200%;
 color:  rgb(255, 135, 0);
}

.main-content table {
    margin-top: 10%;
    box-shadow: 0 2px 2px 2px #ddd;
    width: 50%;
    margin-left: -10%;
}
.main-content table td{
    border: none;
   
 
}
.main-content{
    position: relative;
}
.wrapp-table{
    display: flex;
    flex-direction: row;
    
    margin-left: -10%;
}
.wrapp-table{
    position: relative;
}
.resolve-complaint{
    background-color: #fff;
    display: flex;
   
  position: absolute;
  top: 10%;
  width: 47%;
  left: 10%;
  box-shadow: 0 2px 2px 2px #ddd;
  padding: 10px;
}
.resolve-complaint .text-heading{
    margin-left: 20px;
}
.resolve-complaint .view-resolve{
    margin-left: 50%;
    background-color: rgb(255, 135, 0);
    box-shadow: 0 2px 2px 2px #ddd;
    padding: 5px;
    border-radius: 10px;
    color: #fff;
}
.main-content table #view-td{
    color: rgb(255, 135, 0);
    font-size: large;
    font-weight: 400;
}
.main-content .table1{
    margin-left: 10%;
}
.main-content .table2 {
    width: 50%;
    margin-left: 5%;

    
   
}
.main-content .resolve-complaint1{
    background-color: #fff;
    display: flex;
    flex-direction: row;
    margin-top: 5%;
    
} 
 .main-content .resolve-complaint1{
    position: absolute;
    left: 12%;
    top: 40%;
    width: 48%;
    padding: 1%;
    box-shadow: 0 2px 2px 2px #ddd;
} 
 .resolve-complaint1 .text-heading1{
    margin-left: 20px;
}
.resolve-complaint1 .view-resolve1{
    margin-left: 50%;
    background-color: rgb(255, 135, 0);
    box-shadow: 0 2px 2px 2px #ddd;
    padding: 5px;
    border-radius: 10px;
    color: #fff;
} -->
 */
 <table id="resultTable" class="table table-bordered table-hover table-striped">
    <thead>
        <tr>
            <th>Student Name</th>
            <th>Matric Number</th>
            <th>Department</th>
            <th>Section</th>
            <th>Level</th>
            <th>Semester</th>
            <th>COURSE TITLE</th>
            <th>COURSE CODE</th>
            <th>COURSE UNIT</th>
            <th>ASSESMENT1</th>
            <!-- Add more headers if needed -->
        </tr>
    </thead>
    <tbody>
        <% uploadedResult.forEach(user => { %>
            <% user.courses.forEach(course => { %>
                <tr>
                    <td><%= user.name %> </td>
                    <td><%= user.matric %> </td>
                    <td><%= user.department %> </td>
                    <td><%= user.section %> </td>
                    <td><%= user.level %> </td>
                    <td><%= user.semester %> </td>
                    <td><%= course.course_title %> </td>
                    <td><%= course.course_code %> </td>
                    <td><%= course.course_unit %> </td>
                    <td><%= course.assessment1 %> </td>
                    <!-- Add more data cells if needed -->
                </tr>
            <% }); %>
        <% }); %>
    </tbody>
</table>
</div>
</div>
</div>
</div>
</div>

<!-- Your script imports and custom scripts go here -->
<script src="/jquery/jquery.min.js"></script>
<script src="/bootstrap/dist/js/bootstrap.bundle.js"></script>
<!-- DataTables JS -->
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
var table = new DataTable('#resultTable', {
paging: true, // Enable pagination
pageLength: 10, // Number of rows to display per page
lengthChange: false, // Disable the option to change the number of rows displayed
searching: true, // Enable search functionality
info: false // Disable info text "Showing X to Y of Z entries"
});
});
</script>

.navbar{
    background-color:#fff;
    
    box-shadow: 2px 4px 2px #ddd;
}
 .sidebar{
    background-color:rgb(255, 135, 0);
    /* height: 650px; */
    box-shadow: 2px 4px 2px #ddd;
    
    
    }
    
    .sidebar .cont{
    
    margin-top: 50px;
    padding: auto;
   
    font-size: larger;


}
.sidebar .cont li{
    /* padding: 20px; */
    box-shadow:  0 1px 2px;
    margin-top: 40px;
    /* text-align: center; */
    
    
    }
    .sidebar .cont li a,.fa{
    color: black;
    
    margin: 10px;

}
.sidebar .cont li :hover{
    background-color: #fff;
    box-shadow:  0 1px 2px #ddd;

}

.main-content table {
    margin-top: 10%;
    box-shadow: 0 2px 2px 2px #ddd;
    width: 100%;
}
.main-content table td{
    border: none;
   
 
}
.main-content{
    position: relative;
}
.wrapp-table{
    display: flex;
    flex-direction: row;
    
    margin-left: -100px;
}
.wrapp-table{
    position: relative;
}
.resolve-complaint{
    background-color: #fff;
    display: flex;
   
  position: absolute;
  top: 32%;
  width:90%;
  left: 10%;
  box-shadow: 0 2px 2px 2px #ddd;
  padding: 10px;
}
.resolve-complaint .text-heading{
    margin-left: 25%;
    font-size: larger;
    font-weight: 600;
}
.resolve-complaint .view-resolve{
    margin-left: 50%;
    background-color: rgb(255, 135, 0);
    box-shadow: 0 2px 2px 2px #ddd;
    padding: 5px;
    border-radius: 10px;
    color: #fff;
}
.main-content table #view-td{
    color: rgb(255, 135, 0);
    font-size: large;
    font-weight: 400;
}

.main-content .table1{
    margin-left: 10%;
} */



admin CSS


.navbar{
    background-color:#fff;
    
    box-shadow: 2px 4px 2px #ddd;
}
 .sidebar{
    background-color:rgb(255, 135, 0);
    /* height: 650px; */
    box-shadow: 2px 4px 2px #ddd;
    
    
    }
    
    .sidebar .cont{
    
    margin-top: 50px;
    padding: auto;
   
    font-size: larger;


}
.sidebar .cont li{
    /* padding: 20px; */
    box-shadow:  0 1px 2px;
    margin-top: 40px;
    /* text-align: center; */
    
    
    }
    .sidebar .cont li a,.fa{
    color: black;
    
    margin: 10px;

}
.sidebar .cont li :hover{
    background-color: #fff;
    box-shadow:  0 1px 2px #ddd;

}
.box-cont{
    
    font-size: larger;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-top: 20px;
    
}
.box-cont .box1{
    width: 250px;
    background-color:#fff ;
    height: 200px;
    box-shadow: 0 2px 2px 2px #ddd;
    padding: 10px;
    font-size: larger;
    font-weight: 600;
}
.box-cont .box1 .fig, .text{
    margin: 30px 10px ;
    text-transform: capitalize;
    text-shadow: 0 4px 4px  #ddd;
}
.box-cont .icon{
    position: absolute;
    left: 15%;
    top: 5%;
    font-size: 200%;
 color:  rgb(255, 135, 0);
 
}
.box-cont .icon1{
    position: absolute;
    left: 40%;
    top: 5%;
    font-size: 200%;
 color:  rgb(255, 135, 0);
}
.box-cont .icon2{
    position: absolute;
    left: 65%;
    top: 5%;
    font-size: 200%;
 color:  rgb(255, 135, 0);
}
.box-cont  .icon3{
    position: absolute;
    left: 90%;
    top: 5%;
    font-size: 200%;
 color:  rgb(255, 135, 0);
}

.main-content table {
    margin-top: 10%;
    box-shadow: 0 2px 2px 2px #ddd;
    width: 50%;
}
.main-content table td{
    border: none;
   
 
}
.main-content{
    position: relative;
}
.wrapp-table{
    display: flex;
    flex-direction: row;
    
    margin-left: -100px;
}
.wrapp-table{
    position: relative;
}
.resolve-complaint{
    background-color: #fff;
    display: flex;
   
  position: absolute;
  top: 32%;
  width: 47%;
  left: 10%;
  box-shadow: 0 2px 2px 2px #ddd;
  padding: 10px;
}
.resolve-complaint .text-heading{
    margin-left: 20px;
}
.resolve-complaint .view-resolve{
    margin-left: 50%;
    background-color: rgb(255, 135, 0);
    box-shadow: 0 2px 2px 2px #ddd;
    padding: 5px;
    border-radius: 10px;
    color: #fff;
}
.main-content table #view-td{
    color: rgb(255, 135, 0);
    font-size: large;
    font-weight: 400;
}
.main-content .table1{
    margin-left: 10%;
}
.main-content .table2 {
    width: 40%;
    margin-left: 5%;
    
   
}
.main-content .resolve-complaint1{
    background-color: #fff;
    display: flex;
    flex-direction: row;
    margin-top: 5%;
    
}
.main-content .resolve-complaint1{
    position: absolute;
    left: 62%;
    top: 2%;
    width: 38%;
    padding: 1%;
    box-shadow: 0 2px 2px 2px #ddd;
}
.resolve-complaint1 .text-heading1{
    margin-left: 20px;
}
.resolve-complaint1 .view-resolve1{
    margin-left: 50%;
    background-color: rgb(255, 135, 0);
    box-shadow: 0 2px 2px 2px #ddd;
    padding: 5px;
    border-radius: 10px;
    color: #fff;
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Registered Students Page</title>
    <link rel="stylesheet" href="/css/adminDashBord.css">
    <script src="https://kit.fontawesome.com/56adb67a5b.js" crossorigin="anonymous"></script>
    <link href="/bootstrap/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <style>
        .navbar {
            background-color: #fff;
            box-shadow: 2px 4px 2px #ddd;
        }
        .sidebar {
            background-color: rgb(255, 135, 0);
            box-shadow: 2px 4px 2px #ddd;
        }
        .sidebar .cont {
            margin-top: 50px;
            padding: auto;
            font-size: larger;
        }
        .sidebar .cont li {
            box-shadow: 0 1px 2px;
            margin-top: 40px;
        }
        .sidebar .cont li a, .fa {
            color: black;
            margin: 10px;
        }
        .sidebar .cont li:hover {
            background-color: #fff;
            box-shadow: 0 1px 2px #ddd;
        }
        .resolve-complaint {
            background-color: #fff;
            box-shadow: 0 2px 2px 2px #ddd;
            margin-top: 5%;
        }
        .table thead th {
            white-space: nowrap;
        }
        .resolve-complaint {
            width: 50%;
        }
        .box-cont .table1 {
            margin-left: -2%;
            width: 50%;
        }
        @media (max-width: 767px) {
            .sidebar {
                display: none;
            }
            .main-content {
                margin: 0;
                padding: 0;
            }
        }
        .wrapp-box {
            padding: 20px;
        }
        .box-cont {
            padding: 20px;
        }
        .resolve-complaint {
            padding: 10px;
            margin-bottom: 20px;
        }
        .text-heading {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .custom-search-input {
            margin-bottom: 20px;
        }
        .pagination {
            display: flex;
            justify-content: flex-start;
            margin-top: 10px;
        }
        .pagination button {
            padding: 0.5em 1em;
            margin: 0 0.5em;
            background: rgb(255, 135, 0);
            border: 1px solid #ddd;
            color: white;
            border-radius: 4px;
            cursor: pointer;
        }
        .pagination button:hover {
            background: rgb(255, 165, 0);
        }
        .pagination button.active {
            background: rgb(255, 165, 0);
            color: white;
        }
    </style>
    <nav class="navbar navbar-expand-lg">
        <div class="container">
            <img src="logo" alt="logo">
            <ul class="nav justify-content-end">
                <li class="nav-item">
                    <a class="nav-link" href="#" style="color: rgb(255, 135, 0); margin-left: -80%;"><i class="fa-regular fa-bell"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" style="color: red; font-size: larger; font-weight: 600;">Log out</a>
                </li>
            </ul>
        </div>
    </nav>
    
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 col-md-3 col-lg-2 sidebar">
                <!-- including admin sidebar -->
                <%- include('_includeFolder/_adminSideBar') %>
                <!-- including admin sidebar -->
            </div>
            
            <div class="col-12 col-md-9 col-lg-10 main-content">
                <div class="wrapp-box bx">
                    <div class="container box-cont">
                        <div class="resolve-complaint">
                            <div class="text-heading">All Registered Students</div>
                            <input type="text" id="customSearchBox" class="form-control custom-search-input" placeholder="Search...">
                        </div>
                        <div class="table-container">
                            <table id="studentTable" class="table table-bordered table1">
                                <thead>
                                    <tr>
                                        <th>S/N</th>
                                        <th>NAME</th>
                                        <th>MATRIC</th>
                                        <th>DEPARTMENT</th>
                                        <th>COMPLAINT DATE</th>
                                        <th>VIEW</th>
                                    </tr>
                                </thead>
                                <tbody id="studentTableBody">
                                    <% for (let i = 0; i < allComplaints.length; i++) { %>
                                        <tr>
                                            <td><%= i + 1 %></td>
                                            <td><%= allComplaints[i].student.fname %> <%= allComplaints[i].student.lname %></td>
                                            <td><%= allComplaints[i].student.matric %></td>
                                            <td><%= allComplaints[i].student.department %></td>
                                            <td><%= new Date(allComplaints[i].complaint_date).toLocaleDateString() %></td>
                                            <td id="view-td">View</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                        <div class="pagination" id="paginationControls"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const rowsPerPage = 5;
            let currentPage = 1;
            const table = document.getElementById('studentTable');
            const tableBody = document.getElementById('studentTableBody');
            const paginationControls = document.getElementById('paginationControls');
            const rows = Array.from(tableBody.querySelectorAll('tr'));
            const totalRows = rows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage);

            function displayRows() {
                tableBody.innerHTML = '';
                const startIndex = (currentPage - 1) * rowsPerPage;
                const endIndex = Math.min(startIndex + rowsPerPage, totalRows);
                for (let i = startIndex; i < endIndex; i++) {
                    tableBody.appendChild(rows[i]);
                }
            }

            function updatePagination() {
                paginationControls.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    const button = document.createElement('button');
                    button.innerText = i;
                    button.classList.add('paginate-button');
                    if (i === currentPage) {
                        button.classList.add('active');
                    }
                    button.addEventListener('click', function() {
                        currentPage = i;
                        displayRows();
                        updatePagination();
                    });
                    paginationControls.appendChild(button);
                }
            }

            // Custom search functionality
            const customSearchBox = document.getElementById('customSearchBox');
            customSearchBox.addEventListener('keyup', function() {
                const searchTerm = this.value.toLowerCase();
                const filteredRows = rows.filter(row => {
                    return row.innerText.toLowerCase().includes(searchTerm);
                });
                totalRows = filteredRows.length;
                totalPages = Math.ceil(totalRows / rowsPerPage);
                currentPage = 1;
                displayRows(filteredRows);
                updatePagination(filteredRows);
            });

            // Initialize table
            displayRows();
            updatePagination();
        });
    </script>
</body>
</html>


<script>
    document.addEventListener('DOMContentLoaded', function() {
        const rowsPerPage = 2;
        let currentPage = 1;
        const table = document.getElementById('studentTable');
        const tableBody = document.getElementById('studentTableBody');
        const paginationControls = document.getElementById('paginationControls');
        const rows = Array.from(tableBody.querySelectorAll('tr'));
        const totalRows = rows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);

        function displayRows() {
            tableBody.innerHTML = '';
            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = Math.min(startIndex + rowsPerPage, totalRows);
            for (let i = startIndex; i < endIndex; i++) {
                tableBody.appendChild(rows[i]);
            }
        }

        function updatePagination() {
            paginationControls.innerHTML = '';
            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.innerText = i;
                button.classList.add('paginate-button');
                if (i === currentPage) {
                    button.classList.add('active');
                }
                button.addEventListener('click', function() {
                    currentPage = i;
                    displayRows();
                    updatePagination();
                });
                paginationControls.appendChild(button);
            }
        }

        // Custom search functionality
        const customSearchBox = document.getElementById('customSearchBox');
        customSearchBox.addEventListener('keyup', function() {
            const searchTerm = this.value.toLowerCase();
            const filteredRows = rows.filter(row => {
                return row.innerText.toLowerCase().includes(searchTerm);
            });
            totalRows = filteredRows.length;
            totalPages = Math.ceil(totalRows / rowsPerPage);
            currentPage = 1;
            displayRows(filteredRows);
            updatePagination(filteredRows);
        });

        // Initialize table
        displayRows();
        updatePagination();
    });
</script>


<ul class="nav flex-column cont">
    <li class="nav-item"><a class="nav-link active" href="/user/dashBord">HOME</a></li>
    <li class="nav-item"><a class="nav-link active" href="/student/profile">Profile</a></li>
    <li class="nav-item"><a class="nav-link" href="#" id="check-result">Check Result</a></li>
    <li class="nav-item"><a class="nav-link" href="#" id="layComplaintLink">Lay Complaint</a></li>
    <li class="nav-item"><a class="nav-link" href="#">Notifications</a></li>
</ul>

<script>
  // Get all the navigation links
  const navLinks = document.querySelectorAll('.nav-link');

  // Attach click event listener to each navigation link
  navLinks.forEach(link => {
    link.addEventListener('click', function(event) {
      // Prevent the default link behavior
      event.preventDefault();

      // Hide the remaining content by setting display to 'none'
      navLinks.forEach(otherLink => {
        if (otherLink !== link) {
          const remainingContent = otherLink.parentNode;
          remainingContent.style.display = 'none';
        }
      });

      // Perform specific actions based on the clicked link
      if (link.id === 'check-result') {
        // Handle Check Result link click
        console.log('Check Result clicked');
      } else if (link.id === 'layComplaintLink') {
        // Handle Lay Complaint link click
        console.log('Lay Complaint clicked');
      }
    });
  });
</script>




<ul class="nav flex-column cont">
    <li class="nav-item"><a class="nav-link active" href="/user/dashBord">HOME</a></li>
    <li class="nav-item"><a class="nav-link active" href="/student/profile">Profile</a></li>
    <li class="nav-item"><a class="nav-link" href="#" id="check-result">Check Result</a></li>
    <li class="nav-item"><a class="nav-link" href="#" id="layComplaintLink">Lay Complaint</a></li>
    <li class="nav-item"><a class="nav-link" href="#">Notifications</a></li>
</ul>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
  $(document).ready(function() {
    $('.nav-link').click(function(event) {
      event.preventDefault();

      const clickedLink = $(this);
      const navLinks = $('.nav-link');

      navLinks.not(clickedLink).each(function() {
        const remainingContent = $(this).parent();
        remainingContent.hide();
      });

      if (clickedLink.attr('id') === 'check-result') {
        // Handle Check Result link click
        console.log('Check Result clicked');
      } else if (clickedLink.attr('id') === 'layComplaintLink') {
        // Handle Lay Complaint link click
        console.log('Lay Complaint clicked');
      }
    });
  });
</script>



<ul class="nav flex-column cont">
    <li class="nav-item"><a class="nav-link active" href="/user/dashBord">HOME</a></li>
    <li class="nav-item"><a class="nav-link active" href="/student/profile">Profile</a></li>
    <li class="nav-item"><a class="nav-link" href="#" id="check-result">Check Result</a></li>
    <li class="nav-item"><a class="nav-link" href="#" id="layComplaintLink">Lay Complaint</a></li>
    <li class="nav-item"><a class="nav-link" href="#">Notifications</a></li>
</ul>

<div id="complaintSection" style="display: none;">Complaint Section</div>
<div id="viewResult" style="display: block;">View Result Section</div>
<div id="boxCont" style="display: block;">Box Cont Section</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
  $(document).ready(function() {
    $('.nav-link').click(function(event) {
      event.preventDefault();

      const clickedLink = $(this);
      const navLinks = $('.nav-link');
      const complaintSection = $('#complaintSection');
      const viewResult = $('#viewResult');
      const boxCont = $('#boxCont');

      navLinks.not(clickedLink).each(function() {
        const remainingContent = $(this).parent();
        remainingContent.hide();
      });

      if (clickedLink.attr('id') === 'check-result') {
        // Handle Check Result link click
        viewResult.show();
        boxCont.show();
      } else if (clickedLink.attr('id') === 'layComplaintLink') {
        // Handle Lay Complaint link click
        complaintSection.show();
        viewResult.hide();
        boxCont.hide();
      }
    });
  });
</script>


js

<ul class="nav flex-column cont">
    <li class="nav-item"><a class="nav-link active" href="/user/dashBord">HOME</a></li>
    <li class="nav-item"><a class="nav-link active" href="/student/profile">Profile</a></li>
    <li class="nav-item"><a class="nav-link" href="#" id="check-result">Check Result</a></li>
    <li class="nav-item"><a class="nav-link" href="#" id="layComplaintLink">Lay Complaint</a></li>
    <li class="nav-item"><a class="nav-link" href="#">Notifications</a></li>
</ul>

<div id="complaintSection" style="display: none;">Complaint Section</div>
<div id="viewResult" style="display: block;">View Result Section</div>
<div id="boxCont" style="display: block;">Box Cont Section</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const navLinks = document.querySelectorAll('.nav-link');
    const complaintSection = document.getElementById('complaintSection');
    const viewResult = document.getElementById('viewResult');
    const boxCont = document.getElementById('boxCont');

    navLinks.forEach(function(link) {
      link.addEventListener('click', function(event) {
        event.preventDefault();

        const clickedLink = event.target;

        navLinks.forEach(function(otherLink) {
          if (otherLink !== clickedLink) {
            const remainingContent = otherLink.parentNode;
            remainingContent.style.display = 'none';
          }
        });

        if (clickedLink.id === 'check-result') {
          // Handle Check Result link click
          viewResult.style.display = 'block';
          boxCont.style.display = 'block';
        } else if (clickedLink.id === 'layComplaintLink') {
          // Handle Lay Complaint link click
          complaintSection.style.display = 'block';
          viewResult.style.display = 'none';
          boxCont.style.display = 'none';
        }
      });
    });
  });
</script>



document.addEventListener("DOMContentLoaded", function() {
    const form = document.getElementById('registrationForm');
    const roleSelect = document.querySelector("#role");
    const allowedImageTypes = ['image/jpeg', 'image/jpg', 'image/png'];
    const maxFileSize = 1 * 1024 * 1024; // 1 MB

    // Regular expressions for validation
    const fnameRegex = /^[A-Za-z\s.'-]+$/;
    const lnameRegex = /^[A-Za-z\s.'-]+$/;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const passwordRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*[\d])(?=.*[\W_]).{8,}$/;
    const phone_numberRegex = /^\+?\d{1,4}[-\s]?\d{1,15}$/;
    const addressRegex = /^[A-Za-z0-9\s.,#'-]+$/;
    const stateRegex = /^[A-Za-z\s.'-]+$/;
    const lgaRegex = /^[A-Za-z\s\-'’]+$/;
    const matricRegex = /^\d{4}\/[A-Z]+\/\d+$/;

    // Function to handle changes in the role select element
    function handleRoleChange() {
        const matric = document.querySelector("#matric");
        const middleName = document.querySelector("#middle_name");
        const department = document.querySelector("#department");
        const profileImage = document.querySelector("#profile_image");
        const matricLabel = document.querySelector("label[for='matric']");
        const middleNameLabel = document.querySelector("label[for='middle_name']");
        const departmentLabel = document.querySelector("label[for='department']");
        const profileImageLabel = document.querySelector("label[for='profile_image']");

        if (roleSelect.value === "admin") {
            matric.style.display = "none";
            middleName.style.display = "none";
            department.style.display = "none";
            profileImage.style.display = "none";
            matricLabel.style.display = "none";
            middleNameLabel.style.display = "none";
            departmentLabel.style.display = "none";
            profileImageLabel.style.display = "none";

            // Remove the 'required' attribute from form fields
            matric.removeAttribute("required");
            middleName.removeAttribute("required");
            department.removeAttribute("required");
            profileImage.removeAttribute("required");

        } else if (roleSelect.value === "staff") {
            matric.style.display = "none";
            department.style.display = "none";
            profileImage.style.display = "block";
            middleName.style.display = "none";
            matricLabel.style.display = "none";
            departmentLabel.style.display = "none";
            profileImageLabel.style.display = "block";
            middleNameLabel.style.display = "none";

            // Add the 'required' attribute to form fields
            matric.removeAttribute("required");
            middleName.removeAttribute("required");
            department.removeAttribute("required");
            profileImage.setAttribute("required", "required");

        } else {
            matric.style.display = "block";
            department.style.display = "block";
            profileImage.style.display = "block";
            middleName.style.display = "block";
            matricLabel.style.display = "block";
            departmentLabel.style.display = "block";
            profileImageLabel.style.display = "block";
            middleNameLabel.style.display = "block";

            // Add the 'required' attribute to form fields
            matric.setAttribute("required", "required");
            middleName.setAttribute("required", "required");
            department.setAttribute("required", "required");
            profileImage.setAttribute("required", "required");
        }
    }

    // Add event listener for the role select element
    roleSelect.addEventListener("change", function(e) {
        e.preventDefault();
        handleRoleChange();
    });

    // Call handleRoleChange once on page load
    handleRoleChange();

    // Form validation and submission
    form.addEventListener('submit', function(event) {
        event.preventDefault();
        const isValid = validateForm();

        if (isValid) {
            submitForm();
        }
    });

    function validateForm() {
        let isValid = true;

        // Clear previous errors
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach(element => element.remove());

        // Validate fields based on role
        const role = roleSelect.value;

        if (role === "admin") {
            isValid = validateAdminFields();
        } else if (role === "staff") {
            isValid = validateStaffFields();
        } else {
            isValid = validateStudentFields();
        }

        return isValid;
    }

    function validateAdminFields() {
        let isValid = true;

        // Validate input fields for admin
        const fnameField = form.querySelector('#first_name');
        if (fnameField && !fnameRegex.test(fnameField.value)) {
            isValid = false;
            showError(fnameField, 'Invalid first name format');
        }

        const lnameField = form.querySelector('#last_name');
        if (lnameField && !lnameRegex.test(lnameField.value)) {
            isValid = false;
            showError(lnameField, 'Invalid last name format');
        }

        const emailField = form.querySelector('#email');
        if (emailField && !emailRegex.test(emailField.value)) {
            isValid = false;
            showError(emailField, 'Invalid email format');
        }

        const passwordField = form.querySelector('#password');
        if (passwordField && !passwordRegex.test(passwordField.value)) {
            isValid = false;
            showError(passwordField, 'Invalid password format');
        }

        const phoneField = form.querySelector('#phone_no');
        if (phoneField && !phone_numberRegex.test(phoneField.value)) {
            isValid = false;
            showError(phoneField, 'Invalid phone number format');
        }

        const addressField = form.querySelector('#address');
        if (addressField && !addressRegex.test(addressField.value)) {
            isValid = false;
            showError(addressField, 'Invalid address format');
        }

        const stateField = form.querySelector('#state_of_origin');
        if (stateField && !stateRegex.test(stateField.value)) {
            isValid = false;
            showError(stateField, 'Invalid state format');
        }

        const lgaField = form.querySelector('#LGA');
        if (lgaField && !lgaRegex.test(lgaField.value)) {
            isValid = false;
            showError(lgaField, 'Invalid LGA format');
        }

        const dobField = form.querySelector('#date_of_birth');
        if (dobField && isNaN(Date.parse(dobField.value))) {
            isValid = false;
            showError(dobField, 'Invalid date of birth format');
        }

        return isValid;
    }

    function validateStaffFields() {
        let isValid = true;

        // Validate input fields for staff (similar to admin)
        const fnameField = form.querySelector('#first_name');
        if (fnameField && !fnameRegex.test(fnameField.value)) {
            isValid = false;
            showError(fnameField, 'Invalid first name format');
        }

        const lnameField = form.querySelector('#last_name');
        if (lnameField && !lnameRegex.test(lnameField.value)) {
            isValid = false;
            showError(lnameField, 'Invalid last name format');
        }

        const emailField = form.querySelector('#email');
        if (emailField && !emailRegex.test(emailField.value)) {
            isValid = false;
            showError(emailField, 'Invalid email format');
        }

        const passwordField = form.querySelector('#password');
        if (passwordField && !passwordRegex.test(passwordField.value)) {
            isValid = false;
            showError(passwordField, 'Invalid password format');
        }

        const phoneField = form.querySelector('#phone_no');
        if (phoneField && !phone_numberRegex.test(phoneField.value)) {
            isValid = false;
            showError(phoneField, 'Invalid phone number format');
        }

        const addressField = form.querySelector('#address');
        if (addressField && !addressRegex.test(addressField.value)) {
            isValid = false;
            showError(addressField, 'Invalid address format');
        }

        const stateField = form.querySelector('#state_of_origin');
        if (stateField && !stateRegex.test(stateField.value)) {
            isValid = false;
            showError(stateField, 'Invalid state format');
        }

        const lgaField = form.querySelector('#LGA');
        if (lgaField && !lgaRegex.test(lgaField.value)) {
            isValid = false;
            showError(lgaField, 'Invalid LGA format');
        }

        const dobField = form.querySelector('#date_of_birth');
        if (dobField && isNaN(Date.parse(dobField.value))) {
            isValid = false;
            showError(dobField, 'Invalid date of birth format');
        }

        // Validate profile image
        const profileImageField = form.querySelector('#profile_image');
        if (profileImageField && profileImageField.files.length > 0) {
            const file = profileImageField.files[0];
            if (!allowedImageTypes.includes(file.type)) {
                isValid = false;
                showError(profileImageField, 'Invalid file type. Only JPG, JPEG, and PNG are allowed.');
            }
            if (file.size > maxFileSize) {
                isValid = false;
                showError(profileImageField, 'File size exceeds the maximum limit of 1MB.');
            }
        }

        return isValid;
    }

    function validateStudentFields() {
        let isValid = true;

        // Validate input fields for student (similar to staff)
        const fnameField = form.querySelector('#first_name');
        if (fnameField && !fnameRegex.test(fnameField.value)) {
            isValid = false;
            showError(fname


            document.addEventListener("DOMContentLoaded", function() {
                const form = document.getElementById('registrationForm');
                const roleSelect = document.querySelector("#role");
                const allowedImageTypes = ['image/jpeg', 'image/jpg', 'image/png'];
                const maxFileSize = 1 * 1024 * 1024; // 1 MB
            
                const fnameRegex = /^[A-Za-z\s.'-]+$/;
                const lnameRegex = /^[A-Za-z\s.'-]+$/;
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                const passwordRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*[\d])(?=.*[\W_]).{8,}$/;
                const phone_numberRegex = /^\+?\d{1,4}[-\s]?\d{1,15}$/;
                const addressRegex = /^[A-Za-z0-9\s.,#'-]+$/;
                const stateRegex = /^[A-Za-z\s.'-]+$/;
                const lgaRegex = /^[A-Za-z\s\-'’]+$/;
            
                // Function to handle changes in the role select element
                function handleRoleChange() {
                    const matric = document.querySelector("#matric");
                    const middleName = document.querySelector("#middle_name");
                    const department = document.querySelector("#department");
                    const profileImage = document.querySelector("#profile_image");
                    const matricLabel = document.querySelector("label[for='matric']");
                    const middleNameLabel = document.querySelector("label[for='middle_name']");
                    const departmentLabel = document.querySelector("label[for='department']");
                    const profileImageLabel = document.querySelector("label[for='profile_image']");
            
                    if (roleSelect.value === "admin") {
                        matric.style.display = "none";
                        middleName.style.display = "none";
                        department.style.display = "none";
                        profileImage.style.display = "none";
                        matricLabel.style.display = "none";
                        middleNameLabel.style.display = "none";
                        departmentLabel.style.display = "none";
                        profileImageLabel.style.display = "none";
            
                        // Remove the 'required' attribute from form fields
                        matric.removeAttribute("required");
                        middleName.removeAttribute("required");
                        department.removeAttribute("required");
                        profileImage.removeAttribute("required");
            
                    } else if (roleSelect.value === "staff") {
                        matric.style.display = "none";
                        department.style.display = "none";
                        profileImage.style.display = "block";
                        middleName.style.display = "none";
                        matricLabel.style.display = "none";
                        departmentLabel.style.display = "none";
                        profileImageLabel.style.display = "block";
                        middleNameLabel.style.display = "none";
            
                        // Add the 'required' attribute to form fields
                        matric.removeAttribute("required");
                        middleName.removeAttribute("required");
                        department.removeAttribute("required");
                        profileImage.setAttribute("required", "required");
            
                    } else {
                        matric.style.display = "block";
                        department.style.display = "block";
                        profileImage.style.display = "block";
                        middleName.style.display = "block";
                        matricLabel.style.display = "block";
                        departmentLabel.style.display = "block";
                        profileImageLabel.style.display = "block";
                        middleNameLabel.style.display = "block";
            
                        // Add the 'required' attribute to form fields
                        matric.setAttribute("required", "required");
                        middleName.setAttribute("required", "required");
                        department.setAttribute("required", "required");
                        profileImage.setAttribute("required", "required");
                    }
                }
            
                // Add event listener for the role select element
                roleSelect.addEventListener("change", function(e) {
                    e.preventDefault();
                    handleRoleChange();
                });
            
                // Call handleRoleChange once on page load
                handleRoleChange();
            
                // Form validation and submission
                form.addEventListener('submit', function(event) {
                    event.preventDefault();
                    const isValid = validateForm();
            
                    if (isValid) {
                        submitForm();
                    }
                });
            
                function validateForm() {
                    let isValid = true;
            
                    // Clear previous errors
                    const errorElements = document.querySelectorAll('.error-message');
                    errorElements.forEach(element => element.remove());
            
                    // Validate required fields
                    const requiredFields = form.querySelectorAll('[required]');
                    requiredFields.forEach(field => {
                        if (!field.value.trim()) {
                            isValid = false;
                            showError(field, `${field.previousElementSibling.innerText} is required`);
                        }
                    });
            
                    // Validate first name
                    const fnameField = form.querySelector('#first_name');
                    if (fnameField && !fnameRegex.test(fnameField.value)) {
                        isValid = false;
                        showError(fnameField, 'Invalid first name format');
                    }
            
                    // Validate last name
                    const lnameField = form.querySelector('#last_name');
                    if (lnameField && !lnameRegex.test(lnameField.value)) {
                        isValid = false;
                        showError(lnameField, 'Invalid last name format');
                    }
            
                    // Validate email
                    const emailField = form.querySelector('#email');
                    if (emailField && !emailRegex.test(emailField.value)) {
                        isValid = false;
                        showError(emailField, 'Invalid email format');
                    }
            
                    // Validate password
                    const passwordField = form.querySelector('#password');
                    if (passwordField && !passwordRegex.test(passwordField.value)) {
                        isValid = false;
                        showError(passwordField, 'Invalid password format');
                    }
            
                    // Validate phone number
                    const phoneField = form.querySelector('#phone_no');
                    if (phoneField && !phone_numberRegex.test(phoneField.value)) {
                        isValid = false;
                        showError(phoneField, 'Invalid phone number format');
                    }
            
                    // Validate address
                    const addressField = form.querySelector('#address');
                    if (addressField && !addressRegex.test(addressField.value)) {
                        isValid = false;
                        showError(addressField, 'Invalid address format');
                    }
            
                    // Validate state
                    const stateField = form.querySelector('#state_of_origin');
                    if (stateField && !stateRegex.test(stateField.value)) {
                        isValid = false;
                        showError(stateField, 'Invalid state format');
                    }
            
                    // Validate LGA
                    const lgaField = form.querySelector('#LGA');
                    if (lgaField && !lgaRegex.test(lgaField.value)) {
                        isValid = false;
                        showError(lgaField, 'Invalid LGA format');
                    }
            
                    // Validate date of birth
                    const dobField = form.querySelector('#date_of_birth');
                    if (dobField && isNaN(Date.parse(dobField.value))) {
                        isValid = false;
                        showError(dobField, 'Invalid date of birth format');
                    }
            
                    // Validate profile image
                    const profileImageField = form.querySelector('#profile_image');
                    if (profileImageField && profileImageField.files.length > 0) {
                        const file = profileImageField.files[0];
                        if (!allowedImageTypes.includes(file.type)) {
                            isValid = false;
                            showError(profileImageField, 'Invalid file type. Only JPG, JPEG, and PNG are allowed.');
                        }
                        if (file.size > maxFileSize) {
                            isValid = false;
                            showError(profileImageField, 'File size exceeds the maximum limit of 1MB.');
                        }
                    }
            
                    return isValid;
                }
            
                function showError(field, message) {
                    const error = document.createElement('div');
                    error.className = 'error-message text-danger';
                    error.innerText = message;
                    field.parentNode.appendChild(error);
                    field.classList.add('is-invalid');
                }
            
                function validateEmail(email) {
                    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    return re.test(String(email).toLowerCase());
                }
            
                function submitForm() {
                    const formData = new FormData(form);
            
                    fetch(form.action, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            alert('Error: ' + data.error);
                        } else {
                            alert('Registration successful');
                            form.reset();
                            window.location.href = "/login/page";
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Registration failed');
                    });
                }
            });
            <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/register.css">
    <title>User Registration</title>
    <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
   
</body>
</html><i class="fa-solid fa-eye"></i>
function showError(input, message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;

    // Insert error message after the input field
    input.parentNode.insertBefore(errorDiv, input.nextSibling);
}


            
// uploadResult: async (req, res) => {
    
    //   try {
    //     const { name, matric,  department, section, level, semester } = req.body;
    
    //     // Extract and parse courses data from the request body
    //     const courses = [];
    //     Object.keys(req.body).forEach(key => {
    //       const match = key.match(/courses\[(\d+)\]\[(\w+)\]/);
    //       if (match) {
    //         const index = match[1];
    //         const field = match[2];
    
    //         // Ensure the index exists in the courses array
    //         if (!courses[index]) {
    //           courses[index] = {};
    //         }
    
    //         // Add the field to the appropriate course object
    //         courses[index][field] = req.body[key];
    //       }
    //     });
    
    //     // Convert numeric fields to numbers
    //     courses.forEach(course => {
    //       course.course_unit = parseInt(course.course_unit, 10);
    //       course.assessment1 = parseInt(course.assessment1, 10);
    //       course.assessment2 = parseInt(course.assessment2, 10);
    //       course.exam_score = parseInt(course.exam_score, 10);
    //       course.total_score = parseInt(course.total_score, 10);
    //     });
    //       const user=await  User.findOne({matric})
    //       if(user){
    //         return res.status(201).json({
    //           status:"success",
    //           user
    //         })
    //       }
    //     // Create a new result instance with the parsed data
    //     const userResult = new Result({
    //       student:user._id,
    //       name,
    //       matric,
    //       department,
    //       section,
    //       level,
    //       semester,
    //       courses
    //     });
    //      console.log('user result ',userResult);
    //     // Save the user to the database
    //     await userResult.save();
    
    //     // Send a success response
    //     res.status(201).send(userResult);
    //   } catch (error) {
    //     console.error(error);
    //     res.status(400).send({ message: 'User registration failed', error });
    //   }
    // },












    register






        
        document.addEventListener("DOMContentLoaded", function() {
            const roleSelect = document.querySelector("#role");
            const form = document.querySelector("#registrationForm");
            const profileImage = document.querySelector("#profile_image");
            form.reset()
        
            function handleRoleChange() {
                const matric = document.querySelector("#matric");
                const middleName = document.querySelector("#middle_name");
                const department = document.querySelector("#department");
                const profileImage = document.querySelector("#profile_image");
                const matricLabel = document.querySelector("label[for='matric']");
                const middleNameLabel = document.querySelector("label[for='middle_name']");
                const departmentLabel = document.querySelector("label[for='department']");
                const profileImageLabel = document.querySelector("label[for='profile_image']");
                       
                if (roleSelect.value === "admin") {
                    matric.style.display = "none";
                    middleName.style.display = "none";
                    department.style.display = "none";
                    profileImage.style.display = "none";
                    matricLabel.style.display = "none";
                    middleNameLabel.style.display = "none";
                    departmentLabel.style.display = "none";
                    profileImageLabel.style.display = "none";
        
                    matric.removeAttribute("required");
                    department.removeAttribute("required");
                    profileImage.removeAttribute("required");
             
                } else if (roleSelect.value === "staff") {
                    matric.classList.add("hidden");
                    department.classList.add("hidden");
                    profileImage.classList.remove("hidden");
                    middleName.classList.add("hidden");
                    matricLabel.classList.add("hidden");
                    departmentLabel.classList.add("hidden");
                    profileImageLabel.classList.remove("hidden");
                    middleNameLabel.classList.add("hidden");
                    middleName.style.display = "none";
        
        
                    matric.removeAttribute("required");
                    department.removeAttribute("required");
                    profileImage.setAttribute("required", "required");
                } else {
                    matric.classList.remove("hidden");
                    department.classList.remove("hidden");
                    profileImage.classList.remove("hidden");
                    middleName.classList.remove("hidden");
                    matricLabel.classList.remove("hidden");
                    departmentLabel.classList.remove("hidden");
                    profileImageLabel.classList.remove("hidden");
                    middleNameLabel.classList.remove("hidden");
        
                    matric.setAttribute("required", "required");
                    department.setAttribute("required", "required");
                    profileImage.setAttribute("required", "required");
                }
            }
        
            roleSelect.addEventListener("change", function(e) {
                e.preventDefault();
                handleRoleChange();
            });
        
            handleRoleChange();
        
            const allowedImageTypes = ["image/jpg", "image/png", "image/jpeg"];
            const imageSize = 1 * 1024 * 1024; // 1MB file size
        
            const fnameRegex = /^[A-Za-z\s.'-]+$/;
            // const depregex = /^[A-Za-z\s.'-]+$/;
            const depregex = /^[A-Za-z\s.'-/]+$/;
        
            const lnameRegex = /^[A-Za-z\s.'-]+$/;
            const m_nameRegex = /^[A-Za-z\s.'-]+$/;
            const emailRegex = /^(?=.{1,256}$)(?=.{1,64}@.{1,255}$)(?=.{1,255}\..{1,255}$)(?=.{2,})[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d<,.]{4,}$/;
            const phone_numberRegex = /^\+?\d{1,4}[-\s]?\d{1,15}$/;
            const addressRegex = /^[A-Za-z0-9\s.,#'-]+$/;
            const stateRegex = /^[A-Za-z\s.'-]+$/;
            const lgaRegex = /[A-Za-z\s\-'’]+/;
            const matricRegex = /^\d{4}\/[A-Z]+\/\d+$/;
            const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
        
            function calculateAge(dateOfBirth) {
                const dob = new Date(dateOfBirth);
                const today = new Date();
                let age = today.getFullYear() - dob.getFullYear();
                const monthDifference = today.getMonth() - dob.getMonth();
                if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < dob.getDate())) {
                    age--;
                }
                return age;
            }
        
            form.addEventListener("submit", function(e) {
                e.preventDefault();
                var isValid = validateFormInput();
                if (isValid) {
                    submitForm();
                }
            });
        
            function validateFormInput() {
                const errorMessageElements = document.querySelectorAll(".error-message");
                errorMessageElements.forEach(element => element.remove());
                let isValid = true;
                let role = roleSelect.value;
        
                const dob = document.querySelector("#date_of_birth");
                const age = calculateAge(dob.value);
        
                if (age < 18) {
                    showError(dob, "Age must be 18 or above");
                    isValid = false;
                }
        
                if (role === "admin") {
                    isValid = validateAdmin() && isValid;
                } else if (role === "staff") {
                    isValid = validateStaff() && isValid;
                } else if (role === "student") {
                    isValid = validateStudent() && isValid;
                }
                return isValid;
            }
        
            function validateAdmin() {
                let isValid = true;
                const fnameField = document.querySelector("#first_name");
                const lnameField = document.querySelector("#last_name");
                const email = document.querySelector("#email");
                const psw = document.querySelector("#password");
                const cpsw = document.querySelector("#cpassword").value;
                const stateOrigin = document.querySelector("#state_of_origin");
                const lga = document.querySelector("#LGA");
                const dob = document.querySelector("#date_of_birth");
                const phoneNumber = document.querySelector("#phone_no");
        
                if (fnameField && !fnameRegex.test(fnameField.value)) {
                    showError(fnameField, "Invalid name format");
                    isValid = false;
                }
                if (lnameField && !lnameRegex.test(lnameField.value)) {
                    showError(lnameField, "Invalid last name format");
                    isValid = false;
                }
                if (email && !emailRegex.test(email.value)) {
                    showError(email, "Invalid email format");
                    isValid = false;
                }
                if (psw && !passwordRegex.test(psw.value)) {
                    showError(psw, "Invalid password format");
                    isValid = false;
                }
                if (psw.value !== cpsw.value) {
                    showError(cpsw, "Passwords do not match");
                    isValid = false;
                }
                if (phoneNumber && !phone_numberRegex.test(phoneNumber.value)) {
                    showError(phoneNumber, "Invalid phone number format");
                    isValid = false;
                }
                if (stateOrigin && !stateRegex.test(stateOrigin.value)) {
                    showError(stateOrigin, "Invalid state format");
                    isValid = false;
                }
                if (lga && !lgaRegex.test(lga.value)) {
                    showError(lga, "Invalid LGA format");
                    isValid = false;
                }
                if (dob && !dateRegex.test(dob.value)) {
                    showError(dob, "Invalid date format");
                    isValid = false;
                }
                if (psw !== cpsw) {
                    showError(document.querySelector("#cpassword"), "Passwords do not match");
                    console.log("cp and psw",psw,cpsw)
                    isValid = false;
                }
        
                return isValid;
            }
        
            function validateStaff() {
                let isValid = true;
                const fnameField = document.querySelector("#first_name");
                const lnameField = document.querySelector("#last_name");
                const email = document.querySelector("#email");
                const psw = document.querySelector("#password");
                const cpsw = document.querySelector("#cpassword").value;
                const stateOrigin = document.querySelector("#state_of_origin");
                const lga = document.querySelector("#LGA");
                const dob = document.querySelector("#date_of_birth");
                const phoneNumber = document.querySelector("#phone_no");
                const pImage = document.querySelector("#profile_image");
        
                if (fnameField && !fnameRegex.test(fnameField.value)) {
                    showError(fnameField, "Invalid name format");
                    isValid = false;
                }
                if (lnameField && !lnameRegex.test(lnameField.value)) {
                    showError(lnameField, "Invalid last name format");
                    isValid = false;
                }
                if (email && !emailRegex.test(email.value)) {
                    showError(email, "Invalid email format");
                    isValid = false;
                }
                if (psw && !passwordRegex.test(psw.value)) {
                    showError(psw, "Invalid password format");
                    isValid = false;
                }
                if (psw.value !== cpsw.value) {
                    showError(cpsw, "Passwords do not match");
                    isValid = false;
                }
                if (phoneNumber && !phone_numberRegex.test(phoneNumber.value)) {
                    showError(phoneNumber, "Invalid phone number format");
                    isValid = false;
                }
                if (stateOrigin && !stateRegex.test(stateOrigin.value)) {
                    showError(stateOrigin, "Invalid state format");
                    isValid = false;
                }
                if (lga && !lgaRegex.test(lga.value)) {
                    showError(lga, "Invalid LGA format");
                    isValid = false;
                }
                if (dob && !dateRegex.test(dob.value)) {
                    showError(dob, "Invalid date format");
                    isValid = false;
                }
                if (psw !== cpsw) {
                    showError(document.querySelector("#cpassword"), "Passwords do not match");
                    isValid = false;
                }
                if (!allowedImageTypes.includes(pImage.files[0].type)) {
                    showError(pImage, "Invalid image type. Allowed types are jpg, png, and jpeg");
                    isValid = false;
                }
                if (pImage.files[0].size > imageSize) {
                    showError(pImage, "File size exceeds 1MB limit");
                    isValid = false;
                }
        
                return isValid;
            }
        
            function validateStudent() {
                let isValid = true;
                const fnameField = document.querySelector("#first_name");
                const lnameField = document.querySelector("#last_name");
                const email = document.querySelector("#email");
                const psw = document.querySelector("#password");
                const cpsw = document.querySelector("#cpassword").value;
                const stateOrigin = document.querySelector("#state_of_origin");
                const lga = document.querySelector("#LGA");
                const dob = document.querySelector("#date_of_birth");
                const phoneNumber = document.querySelector("#phone_no");
                const matric = document.querySelector("#matric");
                const dep = document.querySelector("#department");
                const pImage = document.querySelector("#profile_image");
                const middleName = document.querySelector("#middle_name");
        
                if (fnameField && !fnameRegex.test(fnameField.value)) {
                    showError(fnameField, "Invalid name format");
                    isValid = false;
                }
                if (lnameField && !lnameRegex.test(lnameField.value)) {
                    showError(lnameField, "Invalid last name format");
                    isValid = false;
                }
                if (email && !emailRegex.test(email.value)) {
                    showError(email, "Invalid email format");
                    isValid = false;
                }
                if (psw && !passwordRegex.test(psw.value)) {
                    showError(psw, "Invalid password format");
                    isValid = false;
                }
                if (phoneNumber && !phone_numberRegex.test(phoneNumber.value)) {
                    showError(phoneNumber, "Invalid phone number format");
                    isValid = false;
                }
                if (stateOrigin && !stateRegex.test(stateOrigin.value)) {
                    showError(stateOrigin, "Invalid state format");
                    isValid = false;
                }
                if (lga && !lgaRegex.test(lga.value)) {
                    showError(lga, "Invalid LGA format");
                    isValid = false;
                }
                if (dob && !dateRegex.test(dob.value)) {
                    showError(dob, "Invalid date format");
                    isValid = false;
                }
               
                            if (psw.value !== cpsw.value) {
                                showError(cpsw, "Passwords do not match");
                                isValid = false;
                            }
                if (!allowedImageTypes.includes(pImage.files[0].type)) {
                    showError(pImage, "Invalid image type. Allowed types are jpg, png, and jpeg");
                    isValid = false;
                }
                if (pImage.files[0].size > imageSize) {
                    showError(pImage, "File size exceeds 1MB limit");
                    isValid = false;
                }
                if (matric && !matricRegex.test(matric.value)) {
                    showError(matric, "Invalid matric number format");
                    isValid = false;
                }
                if (dep && !depregex.test(dep.value)) {
                    showError(dep, "Invalid department format");
                    isValid = false;
                }
                if (middleName && !m_nameRegex.test(middleName.value)) {
                    showError(middleName, "Invalid middle name format");
                    isValid = false;
                }
                return isValid;
            }
        
            
            function showError(inputElement, message) {
                // Ensure the element exists before trying to insert an error message
                if (inputElement) {
                    const errorElement = document.createElement("div");
                    errorElement.classList.add("error-message");
                    errorElement.innerText = message;
                    // Check if the next sibling exists to avoid the TypeError
                    const nextSibling = inputElement.nextSibling;
                    if (nextSibling) {
                        inputElement.parentNode.insertBefore(errorElement, nextSibling);
                    } else {
                        inputElement.parentNode.appendChild(errorElement);
                    }
                } else {
                    console.error("Input element is not defined:", inputElement);
                }
            }
        
        //     const errorMessages = document.querySelectorAll(".error-message");
        //     errorMessages.forEach(error => error.remove());
        
        
        //     function submitForm() {
        //         form.submit();
        //     }
        
        
        
        //     function submitForm() {
        //         const formData = new FormData(form);
        //         fetch(form.action, {
        //             method: "POST",
        //             body: formData
        //         })
        //         .then(response => {
        //             if (response.redirected) {
        //                 // Handle redirect
        //                 window.location.href = response.url;
        //                 return null;
        //             }
        //             return response.json();
        //         })
        //         .then(data => {
        //             if (data && data.error) {
        //                 alert("Error: " + data.error);
        //             } else if (data) {
        //                 console.log("Data:", data);
        //                 alert("Registration successful"); // Ensure this alert is triggered
        //                 form.reset(); // Optionally reset the form after successful submission
        //             }
        //         })
        //         .catch(error => {
        //             console.error("There was a problem with the fetch operation:", error);
        //             alert("There was a problem with the registration: " + error.message);
        //         });
        //     }
        // });
        